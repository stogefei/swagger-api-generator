{"map":"{\"version\":3,\"file\":\"bizSchemaController.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/api/api-control/bizSchemaController.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter, __generator } from \"tslib\";\r\nimport API from '../../index';\r\n/**\r\n * biz-schema-controller\r\n */\r\nvar BizSchemaController = /** @class */ (function () {\r\n    function BizSchemaController() {\r\n    }\r\n    /**\r\n     * 测试\r\n     * @param param - string - formData - 参数 - 可空\r\n     */\r\n    BizSchemaController.prototype.test = function (param) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/test',\r\n                            method: 'post',\r\n                            data: param,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 模型排序\r\n     * @param schemaSortVo - SchemaSortVo - body - schemaSortVo - 必填\r\n     */\r\n    BizSchemaController.prototype.sort = function (schemaSortVo) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/sort',\r\n                            method: 'post',\r\n                            data: schemaSortVo,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 保存模型标题\r\n     * @param schemaTitleVo - SchemaTitleVo - body - schemaTitleVo - 必填\r\n     */\r\n    BizSchemaController.prototype.saveTitle = function (schemaTitleVo) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/saveTitle',\r\n                            method: 'post',\r\n                            data: schemaTitleVo,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 删除模型\r\n     * @param codes - Array<string> - body - codes - 必填\r\n     */\r\n    BizSchemaController.prototype.removeSchema = function (codes) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/removeSchema',\r\n                            method: 'post',\r\n                            data: codes,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 删除模型分组\r\n     * @param ids - Array<string> - body - ids - 必填\r\n     */\r\n    BizSchemaController.prototype.removeGroup = function (ids) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/removeGroup',\r\n                            method: 'post',\r\n                            data: ids,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 发布模型\r\n     * @param codes - Array<string> - body - codes - 必填\r\n     */\r\n    BizSchemaController.prototype.publish = function (codes) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/publish',\r\n                            method: 'post',\r\n                            data: codes,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 修改模型\r\n     * @param bizSchemaVo - BizSchemaVo - body - bizSchemaVo - 必填\r\n     */\r\n    BizSchemaController.prototype.modifySchema = function (bizSchemaVo) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/modifySchema',\r\n                            method: 'post',\r\n                            data: bizSchemaVo,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 修改模型分组\r\n     * @param bizSchemaGroupVo - BizSchemaGroupVo - body - bizSchemaGroupVo - 必填\r\n     */\r\n    BizSchemaController.prototype.modifyGroup = function (bizSchemaGroupVo) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/modifyGroup',\r\n                            method: 'post',\r\n                            data: bizSchemaGroupVo,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 模型分组排序\r\n     * @param schemaGroupSortVo - SchemaGroupSortVo - body - schemaGroupSortVo - 必填\r\n     */\r\n    BizSchemaController.prototype.groupSort = function (schemaGroupSortVo) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/groupSort',\r\n                            method: 'post',\r\n                            data: schemaGroupSortVo,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 获取模型元数据\r\n     * @param schemaCode - string - query - 模型编码 - 必填\r\n     */\r\n    BizSchemaController.prototype.getSchemaMetadata = function (schemaCode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/getSchemaMetadata',\r\n                            method: 'get',\r\n                            params: { schemaCode: schemaCode },\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 获取模型详情\r\n     * @param schemaCode - string - query - 模型编码 - 必填\r\n     */\r\n    BizSchemaController.prototype.getSchemaInfo = function (schemaCode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/getSchemaInfo',\r\n                            method: 'get',\r\n                            params: { schemaCode: schemaCode },\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 获取模型树\r\n     * @param appCode - string - query - 应用编码 - 必填\r\n     */\r\n    BizSchemaController.prototype.getModelTree = function (appCode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/getModelTree',\r\n                            method: 'get',\r\n                            params: { appCode: appCode },\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 获取模型列表\r\n     * @param appCode - string - query - 应用编码 - 必填\r\n     */\r\n    BizSchemaController.prototype.getModelList = function (appCode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/getModelList',\r\n                            method: 'get',\r\n                            params: { appCode: appCode },\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 获取模型分组列表\r\n     * @param appCode - string - query - 应用编码 - 必填\r\n     */\r\n    BizSchemaController.prototype.getGroupTree = function (appCode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/getGroupTree',\r\n                            method: 'get',\r\n                            params: { appCode: appCode },\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 获取使用关联表单关联了指定模型的模型\r\n     * @param schemaCode - string - query - 模型编码 - 必填\r\n     */\r\n    BizSchemaController.prototype.getCorrlationFormSchema = function (schemaCode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/getCorrlationFormSchema',\r\n                            method: 'get',\r\n                            params: { schemaCode: schemaCode },\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 创建模型\r\n     * @param bizSchemaVo - BizSchemaVo - body - bizSchemaVo - 必填\r\n     */\r\n    BizSchemaController.prototype.createSchema = function (bizSchemaVo) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/createSchema',\r\n                            method: 'post',\r\n                            data: bizSchemaVo,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 创建模型分组\r\n     * @param bizSchemaGroupVo - BizSchemaGroupVo - body - bizSchemaGroupVo - 必填\r\n     */\r\n    BizSchemaController.prototype.createGroup = function (bizSchemaGroupVo) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, API.Global.request({\r\n                            url: '/admin/model/schema/createGroup',\r\n                            method: 'post',\r\n                            data: bizSchemaGroupVo,\r\n                        })];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return BizSchemaController;\r\n}());\r\nexport { BizSchemaController };\r\n//# sourceMappingURL=bizSchemaController.js.map","dts":{"name":"/Users/aofeizhu/github-self/swagger-api-generator/packages/api-swag-core/dist/types/api/api-control/bizSchemaController.d.ts","writeByteOrderMark":false,"text":"import { AxiosResponse } from 'axios';\r\nimport { BizSchemaGroupVo, ResBodyBizSchemaGroupVo, BizSchemaVo, ResBodyBizSchemaVo, ResBodyListBizSchemaVo, ResBodyListBizSchemaGroupVo, ResBodyListFunTreeVo, SchemaGroupSortVo, ResBodyVoid, SchemaTitleVo, SchemaSortVo } from '../model';\r\n/**\r\n * biz-schema-controller\r\n */\r\nexport declare class BizSchemaController {\r\n    /**\r\n     * 测试\r\n     * @param param - string - formData - 参数 - 可空\r\n     */\r\n    test(param?: string): Promise<AxiosResponse<ResBodyVoid, any>>;\r\n    /**\r\n     * 模型排序\r\n     * @param schemaSortVo - SchemaSortVo - body - schemaSortVo - 必填\r\n     */\r\n    sort(schemaSortVo: SchemaSortVo): Promise<AxiosResponse<ResBodyVoid, any>>;\r\n    /**\r\n     * 保存模型标题\r\n     * @param schemaTitleVo - SchemaTitleVo - body - schemaTitleVo - 必填\r\n     */\r\n    saveTitle(schemaTitleVo: SchemaTitleVo): Promise<AxiosResponse<ResBodyVoid, any>>;\r\n    /**\r\n     * 删除模型\r\n     * @param codes - Array<string> - body - codes - 必填\r\n     */\r\n    removeSchema(codes: Array<string>): Promise<AxiosResponse<ResBodyVoid, any>>;\r\n    /**\r\n     * 删除模型分组\r\n     * @param ids - Array<string> - body - ids - 必填\r\n     */\r\n    removeGroup(ids: Array<string>): Promise<AxiosResponse<ResBodyVoid, any>>;\r\n    /**\r\n     * 发布模型\r\n     * @param codes - Array<string> - body - codes - 必填\r\n     */\r\n    publish(codes: Array<string>): Promise<AxiosResponse<ResBodyVoid, any>>;\r\n    /**\r\n     * 修改模型\r\n     * @param bizSchemaVo - BizSchemaVo - body - bizSchemaVo - 必填\r\n     */\r\n    modifySchema(bizSchemaVo: BizSchemaVo): Promise<AxiosResponse<ResBodyBizSchemaVo, any>>;\r\n    /**\r\n     * 修改模型分组\r\n     * @param bizSchemaGroupVo - BizSchemaGroupVo - body - bizSchemaGroupVo - 必填\r\n     */\r\n    modifyGroup(bizSchemaGroupVo: BizSchemaGroupVo): Promise<AxiosResponse<ResBodyBizSchemaGroupVo, any>>;\r\n    /**\r\n     * 模型分组排序\r\n     * @param schemaGroupSortVo - SchemaGroupSortVo - body - schemaGroupSortVo - 必填\r\n     */\r\n    groupSort(schemaGroupSortVo: SchemaGroupSortVo): Promise<AxiosResponse<ResBodyVoid, any>>;\r\n    /**\r\n     * 获取模型元数据\r\n     * @param schemaCode - string - query - 模型编码 - 必填\r\n     */\r\n    getSchemaMetadata(schemaCode: string): Promise<AxiosResponse<ResBodyBizSchemaVo, any>>;\r\n    /**\r\n     * 获取模型详情\r\n     * @param schemaCode - string - query - 模型编码 - 必填\r\n     */\r\n    getSchemaInfo(schemaCode: string): Promise<AxiosResponse<ResBodyBizSchemaVo, any>>;\r\n    /**\r\n     * 获取模型树\r\n     * @param appCode - string - query - 应用编码 - 必填\r\n     */\r\n    getModelTree(appCode: string): Promise<AxiosResponse<ResBodyListFunTreeVo, any>>;\r\n    /**\r\n     * 获取模型列表\r\n     * @param appCode - string - query - 应用编码 - 必填\r\n     */\r\n    getModelList(appCode: string): Promise<AxiosResponse<ResBodyListBizSchemaVo, any>>;\r\n    /**\r\n     * 获取模型分组列表\r\n     * @param appCode - string - query - 应用编码 - 必填\r\n     */\r\n    getGroupTree(appCode: string): Promise<AxiosResponse<ResBodyListBizSchemaGroupVo, any>>;\r\n    /**\r\n     * 获取使用关联表单关联了指定模型的模型\r\n     * @param schemaCode - string - query - 模型编码 - 必填\r\n     */\r\n    getCorrlationFormSchema(schemaCode: string): Promise<AxiosResponse<ResBodyListBizSchemaVo, any>>;\r\n    /**\r\n     * 创建模型\r\n     * @param bizSchemaVo - BizSchemaVo - body - bizSchemaVo - 必填\r\n     */\r\n    createSchema(bizSchemaVo: BizSchemaVo): Promise<AxiosResponse<ResBodyBizSchemaVo, any>>;\r\n    /**\r\n     * 创建模型分组\r\n     * @param bizSchemaGroupVo - BizSchemaGroupVo - body - bizSchemaGroupVo - 必填\r\n     */\r\n    createGroup(bizSchemaGroupVo: BizSchemaGroupVo): Promise<AxiosResponse<ResBodyBizSchemaGroupVo, any>>;\r\n}\r\n"}}
